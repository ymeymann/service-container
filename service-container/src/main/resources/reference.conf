container {

  http {
    interface = "0.0.0.0"
    port = 8080

    cidr {
      # This is a list of IP ranges to allow through. Can be empty.
      allow=[]
      # This is a list of IP ranges to specifically deny access. Can be empty.
      deny=[]
    }

    ssl {
      # Whether to enable SSL connections on all supported protocols.
      enabled	= off

      # This password is used for decrypting the key
      key-password	= ""

      # A path to a key-store file. The path can be absolute or relative to the directory where the component is started in.
      key-store = ""

      # This password is used for decrypting the key store
      key-store-password = ""

      # A path to a trust-store file. The path can be absolute or relative to the directory where the component is started in.
      trust-store = ""

      #  This password is used for decrypting the trust store
      trust-store-password = ""

      # Protocol to use for SSL encryption, choose from:
      # Java 6 & 7:
      #   'SSLv3', 'TLSv1'
      # Java 7:
      #   'TLSv1.1', 'TLSv1.2'
      protocol = "TLSv1"

      # A comma separated list of ciphers. The specified ciphers must be supported by JVM.
      # Example: ["TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA"]
      # You need to install the JCE Unlimited Strength Jurisdiction Policy
      # Files to use AES 256.
      # More info here:
      # http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJCEProvider
      enabled-algorithms = ["TLS_RSA_WITH_AES_128_CBC_SHA"]

      # There are three options, in increasing order of security:
      # "" or SecureRandom => (default)
      # "SHA1PRNG" => Can be slow because of blocking issues on Linux
      # "AES128CounterSecureRNG" => fastest startup and based on AES encryption
      # algorithm
      # "AES256CounterSecureRNG"
      # The following use one of 3 possible seed sources, depending on
      # availability: /dev/random, random.org and SecureRandom (provided by Java)
      # "AES128CounterInetRNG"
      # "AES256CounterInetRNG" (Install JCE Unlimited Strength Jurisdiction
      # Policy Files first)
      # Setting a value here may require you to supply the appropriate cipher
      # suite (see enabled-algorithms section above)
      random-number-generator = ""
    }
  }

  metrics {
    # These are the metrics reporters
    reporters {
      Slf4j {
        # The name of the reporter class
        class = "com.github.vonnagy.service.container.metrics.reporting.Slf4jReporter"
        # Is the reporter enabled
        enabled = on
        # What is the interval to report on
        reporting-interval = 60s
        # What is the logger
        logger = "com.github.vonnagy.service.container.metrics"
      }
    }
  }
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = INFO

  actor {
    debug {
      # enable function of LoggingReceive, which is to log any received message at DEBUG level
      #receive = on
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill and the like)
      #autoreceive = on
      # enable DEBUG logging of actor lifecycle changes
      #lifecycle = on
    }

    # The actor provider. Switch to 'akka.remote.RemoteActorRefProvider' when accessing out
    # of process actors.
    provider = "akka.actor.LocalActorRefProvider"

    # This is the configuration for routing incoming Http requests
    deployment {
      /service/http {
        router = round-robin-pool
        nr-of-instances = 3

        pool-dispatcher {
          # Dispatcher is the name of the event-based dispatcher
          type = Dispatcher
          # What kind of ExecutionService to use
          executor = "fork-join-executor"

          # Configuration for the fork join pool
          fork-join-executor {
            # Min number of threads to cap factor-based parallelism number to
            parallelism-min = 2
            # Parallelism (threads) ... ceil(available processors * factor)
            parallelism-factor = 2.0
            # Max number of threads to cap factor-based parallelism number to
            parallelism-max = 8
          }

          throughput = 100
        }
      }

    }

    # The dispatcher for the main service actor
    service-dispatcher {
      mailbox-type = "akka.dispatch.UnboundedDequeBasedMailbox"
    }

    default-dispatcher {
      throughput = 10
      fork-join-executor {
        # Min number of threads to cap factor-based parallelism number to
        parallelism-min = 2
        parallelism-factor = 1
        parallelism-max = 4
      }
    }
  }

}

spray {
  can {
    server {
      server-header = "service-container"
      request-timeout = 20s

      # Enable/Disable SSL
      # NOTE: WE override this value when start spray and base the vaalue on the SSL
      # settings in container.http.ssl.enabled
      #ssl-encryption = off

      # Enables/disables the addition of a `Remote-Address` header
      # holding the clients (remote) IP address.
      remote-address-header = on
      # Enables/disables support for statistics collection and querying.
      stats-support = on
    }
    parsing {
      max-uri-length: 16k
    }
  }
}

